#+TITLE: Autograd modules

* Neighborlists

Neighborlists are one of the most critical components of molecular simulation. They are challenging to implement in vectorized code that is compatible with Tensorflow. This module implements some in Python that are compatible with autograd.

** Bothways neighbor lists
   
In  a bothways list, you get all the neighbors within a cutoff distance of each atom in the system. That means each atom will be the neighbor of another atom, and vice versa, so if you loop over all of them there will be double counting. It is however, exactly what you want for descriptors of local environments.
   
For reference, here is what a neighborlist from pydoc:ase.neighborlist.NeighborList looks like. It returns a list of indices and offsets to generate the positions. You have to construct the position vectors to each neighbor afterwards.

#+BEGIN_SRC python :results output org drawer
from ase.build import molecule
from ase.neighborlist import NeighborList

atoms = molecule('H2O')
atoms.set_cell((20, 20, 20))

nl = NeighborList([3.0 / 2] * len(atoms), skin=0, 
                  bothways=True, self_interaction=False)
nl.update(atoms)

indices, offsets = nl.get_neighbors(0)

print(f'ase inds: {indices}')
print(f'ase offsets:\n{offsets}')
print('Positions of neighbors')

for i, offset in zip(indices, offsets):
    print(atoms.positions[i] + offset @ atoms.get_cell())
#+END_SRC

#+RESULTS:
:RESULTS:
ase inds: [1 2]
ase offsets:
[[0 0 0]
 [0 0 0]]
Positions of neighbors
[ 0.        0.763239 -0.477047]
[ 0.       -0.763239 -0.477047]
:END:

pydoc:dap.ag.neighborlist.get_distances returns a multidimensional array of distances, and offset vectors. Distances that are greater than the cutoff distance are masked to zero. Here is an example output for the distance array for a water molecule.

#+BEGIN_SRC python :results output org drawer
from ase.build import molecule
from dap.ag.neighborlist import get_distances

atoms = molecule('H2O')
atoms.set_cell((20, 20, 20))
atoms.center()


dists, offsets = get_distances(atoms.positions, atoms.cell, 3.0)
print(dists)
#+END_SRC

#+RESULTS:
:RESULTS:
[[[0.        ]
  [0.96856502]
  [0.96856502]]

 [[0.96856502]
  [0.        ]
  [1.526478  ]]

 [[0.96856502]
  [1.526478  ]
  [0.        ]]]
:END:

It is sometimes easier to work more directly with the neighborlist, e.g. to get a list of the equivalent indices, and offset vectors. pydoc:dap.ag.neighborlist.get_neighbors provides some tools for that.


#+BEGIN_SRC python :results output org drawer
from ase.build import molecule
from dap.ag.neighborlist import get_distances, get_neighbors

atoms = molecule('H2O')
atoms.set_cell((20, 20, 20))
atoms.center()

dists, offsets = get_distances(atoms.positions, atoms.cell, 3.0)

inds, offs = get_neighbors(0, dists, offsets)

print(inds)
print(offs)
#+END_SRC

#+RESULTS:
:RESULTS:
[1 2]
[[0 0 0]
 [0 0 0]]
:END:

*** on a real periodic system

In ASE:

#+BEGIN_SRC python :results output org drawer
import numpy as np
np.set_printoptions(precision=3, suppress=True)

from ase.build import bulk
from ase.neighborlist import NeighborList

a = 3.6
Rc = a / np.sqrt(2) / 2
cutoff_distance = 2 * Rc

atoms = bulk('Cu', 'fcc', a=a).repeat((2, 1, 1))
atoms.rattle()
nl = NeighborList([Rc] * len(atoms), skin=0.01, 
                  bothways=True, self_interaction=False)
nl.update(atoms)

indices, offsets = nl.get_neighbors(0)

isort = np.argsort(offsets.view('f8,f8,f8'), axis=0, 
                   order=['f0', 'f1', 'f2']).flatten()

print(f'ase inds: {indices[isort]}')
print(f'ase offsets:')
print(offsets[isort])
print('Positions of neighbors')

for i, offset in zip(indices[isort], offsets[isort]):
    print(atoms.positions[i] + offset @ atoms.get_cell())
#+END_SRC

#+RESULTS:
:RESULTS:
ase inds: [1 0 1 0 0 0 0 1 0 1 1 1]
ase offsets:
[[ 0  0  0]
 [ 0  0  1]
 [ 0  0 -1]
 [ 0  0 -1]
 [ 0  1  0]
 [ 0  1 -1]
 [ 0 -1  0]
 [ 0 -1  0]
 [ 0 -1  1]
 [-1  0  0]
 [-1  0  1]
 [-1  1  0]]
Positions of neighbors
[0.002 1.8   1.8  ]
[1.8   1.8   0.001]
[-1.798 -0.     1.8  ]
[-1.8   -1.8    0.001]
[ 1.8   -0.     1.801]
[ 0.    -1.8    1.801]
[-1.8   -0.    -1.799]
[-1.798  1.8   -0.   ]
[ 0.     1.8   -1.799]
[ 0.002 -1.8   -1.8  ]
[ 1.802 -0.    -1.8  ]
[ 1.802 -1.8   -0.   ]
:END:

Here is the version from this module. The order of the neighbors may differ.

#+BEGIN_SRC python :results output org drawer
import numpy as np
np.set_printoptions(precision=3, suppress=True)

from ase.build import bulk
from dap.ag.neighborlist import get_distances, get_neighbors

a = 3.6
Rc = a / np.sqrt(2) / 2
cutoff_distance = 2 * Rc

atoms = bulk('Cu', 'fcc', a=a).repeat((2, 1, 1))
atoms.rattle()

dists, doffsets = get_distances(atoms.positions, atoms.cell, cutoff_distance)

indices, offsets = get_neighbors(0, dists, doffsets)

isort = np.argsort(offsets.view('f8,f8,f8'), axis=0, 
                   order=['f0', 'f1', 'f2']).flatten()

print(f'ase inds: {indices[isort]}')
print(f'ase offsets:')
print(offsets[isort])
print('Positions of neighbors')

for i, offset in zip(indices[isort], offsets[isort]):
    print(atoms.positions[i] + offset @ atoms.get_cell())
#+END_SRC

#+RESULTS:
:RESULTS:
ase inds: [1 0 0 1 0 0 0 1 0 1 1 1]
ase offsets:
[[ 0  0  0]
 [ 0  0  1]
 [ 0  0 -1]
 [ 0  0 -1]
 [ 0  1  0]
 [ 0  1 -1]
 [ 0 -1  0]
 [ 0 -1  0]
 [ 0 -1  1]
 [-1  0  0]
 [-1  0  1]
 [-1  1  0]]
Positions of neighbors
[0.002 1.8   1.8  ]
[1.8   1.8   0.001]
[-1.8   -1.8    0.001]
[-1.798 -0.     1.8  ]
[ 1.8   -0.     1.801]
[ 0.    -1.8    1.801]
[-1.8   -0.    -1.799]
[-1.798  1.8   -0.   ]
[ 0.     1.8   -1.799]
[ 0.002 -1.8   -1.8  ]
[ 1.802 -0.    -1.8  ]
[ 1.802 -1.8   -0.   ]
:END:

** Oneway lists

There is a "one-way" concept in a neighborlist. In the "bothways" approach, each pair of atoms has two distances: one from atom i to j, and one from j to i. It is not always desirable to double count these.

Here is a one-way list in ASE.

#+BEGIN_SRC python :results output org drawer
from ase.build import molecule
from ase.neighborlist import NeighborList

atoms = molecule('H2O')
atoms.set_cell((20, 20, 20))

nl = NeighborList([3.0 / 2] * len(atoms), skin=0, 
                  bothways=False, self_interaction=False)
nl.update(atoms)

for i, atom in enumerate(atoms):
    indices, offsets = nl.get_neighbors(i)
    print(f'Atom {i}')
    print(f'  ase inds: {indices}')
    print(f'  ase offsets:\n{offsets}')
    print('  Positions of neighbors')

    for j, offset in zip(indices, offsets):
        print('  ', atoms.positions[j] + offset @ atoms.get_cell())
#+END_SRC

#+RESULTS:
:RESULTS:
Atom 0
  ase inds: [1 2]
  ase offsets:
[[0 0 0]
 [0 0 0]]
  Positions of neighbors
   [ 0.        0.763239 -0.477047]
   [ 0.       -0.763239 -0.477047]
Atom 1
  ase inds: [2]
  ase offsets:
[[0 0 0]]
  Positions of neighbors
   [ 0.       -0.763239 -0.477047]
Atom 2
  ase inds: []
  ase offsets:
[]
  Positions of neighbors
:END:

*** get_neighbors_oneway

This is a near direct translation of the one-way algorithm from ase, and it returns the same results. It is used in the dap.ag.emt module, and it is differentiable. It is not that easy, however, to implement in Tensorflow.
    


* Training the Lennard Jones parameters

There is a database of DFT calculations of Ar in [[./argon.db]]. Here is a brief description of the database. It contains five structures at three different volumes each. For each volume and structure the atoms were randomly displaced many times, and the energy and forces were computed using DFT (Vasp).

#+BEGIN_SRC python :results output org
from collections import Counter
import ase.db

db = ase.db.connect('argon.db')
data = db.select()

keys, cnt = {}, 0
for entry in data:
    cnt += 1
    for k, v in entry.key_value_pairs.items():

        if k in keys:
            keys[k] += [v]
        else:
            keys[k] = [v]

print ('{0:15s} {1:15s} {2} calculations total'.format('keyword', 'value',cnt))

print('------------------------------------------------------')

for k, v in keys.items():
    vals = list(set(v))

    if len(vals) <= 5:
        val = ", ".join(str(e)[:5] for e in vals)
        print('{0:5}: {1}'.format(k, val))

    else:
        val = ", ".join(str(e)[:5] for e in vals[:5])
        print('{0:5s}:{1}, etc...'.format(k, val))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
keyword         value           139 calculations total
------------------------------------------------------
i    :0, 1, 2, 3, 4, etc...
structure: fcc, hcp, sc, diamo, bcc
f    : 0.9, 1.0, 1.1
#+END_SRC


We can use the built in pydoc:autograd.misc.optimizers.adam optimizer to find the best set of parameters. We have to provide an initial guess.

#+BEGIN_SRC python :results output org drawer
import autograd.numpy as np
from dap.ag.lennardjones import energy
from autograd.misc.optimizers import adam
from autograd import grad

import matplotlib.pyplot as plt

import ase.db
db = ase.db.connect('argon.db')

known_energies = [row.energy for row in db.select()]
all_positions = [row.positions for row in db.select()]
all_cells = [row.cell for row in db.select()]

# Initial guess
params = {'epsilon': 0.1, 'sigma': 3.5}

def objective(params, step):
    energies = [energy(params, pos, cell) for pos, cell in zip(all_positions, all_cells)]
    errs = np.array(energies) - np.array(known_energies)
    return np.mean(np.abs(errs))

max_steps = 251
loss_goal = 0.01

def callback(params, step, gradient):
    if step % 100 == 0:
        loss = objective(params, step)
        print(f"step {i * max_steps + step:4d} objective {loss:1.4f} {params}")

for i in range(10):
    if objective(params, None) <= loss_goal:
        break

    params = adam(grad(objective), params,
                  step_size=0.001, num_iters=max_steps, callback=callback)


print(f'Final params = {params} with a MAE of {objective(params, None):1.2e}')

# Save for reuse later. autograd saves the params as 0d arrays, which are not
# serializable, so we cast them as floats here.
import json
with open('argon-lj.json', 'w') as f:
    f.write(json.dumps({'sigma': float(params['sigma']),
                        'epsilon': float(params['epsilon'])}))
#+END_SRC

#+RESULTS:
:RESULTS:
step    0 objective 0.6260 {'epsilon': array(0.1), 'sigma': array(3.5)}
step  100 objective 0.0236 {'epsilon': array(0.00399268), 'sigma': array(3.42282772)}
step  200 objective 0.0168 {'epsilon': array(0.00638201), 'sigma': array(3.43248715)}
step  251 objective 0.0166 {'epsilon': array(0.00631611), 'sigma': array(3.44008306)}
step  351 objective 0.0141 {'epsilon': array(0.00604479), 'sigma': array(3.54264976)}
step  451 objective 0.0107 {'epsilon': array(0.00569821), 'sigma': array(3.65304244)}
Final params = {'epsilon': array(0.00527079), 'sigma': array(3.71124126)} with a MAE of 9.04e-03
:END:

Now that we have fitted it, we can reuse it.

#+BEGIN_SRC python :results output org drawer
import json
import matplotlib.pyplot as plt
import ase.db
import numpy as np
from dap.ag.lennardjones import energy

with open('argon-lj.json') as f:
    params = json.loads(f.read())

db = ase.db.connect('argon.db')

plt.subplot(121)
for structure, spec in [('fcc', 'b.'),
                        ('hcp', 'r.'),
                        ('bcc', 'g.'),
                        ('diamond', 'gd'),
                        ('sc', 'bs')]:

    ke, pe = [], []
    for row in db.select(structure=structure):
        ke += [row.energy]
        atoms = row.toatoms()

        pe += [energy(params, atoms.positions, atoms.cell)]
    plt.plot(ke, pe, spec, label=structure)

plt.plot([-0.1, 0], [-0.1, 0], 'k-', label='parity')
plt.legend()
plt.xlabel('DFT')
plt.ylabel('LJ')

err = np.array(ke) - np.array(pe)

plt.subplot(122)
plt.hist(err)
plt.xlabel('error')
plt.tight_layout()
plt.savefig('ag-lj.png')
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

[[./ag-lj.png]]

See also: http://kitchingroup.cheme.cmu.edu/blog/2017/11/19/Training-the-ASE-Lennard-Jones-potential-to-DFT-calculations/

* EMT - effective medium theory

ASE implements an effective medium theory cite:jacobsen-1996-semi-empir calculator (https://wiki.fysik.dtu.dk/ase/ase/calculators/emt.html#module-ase.calculators.emt), but it is notably lacking an ability to compute stress. One of the key features of differentiable atomistic potentials is that the stress is straightforward to compute. It is tricky to verify the stress is correct, and in the tests we use a numerical approximation to the stress for comparison.

Here is an example usage.

#+BEGIN_SRC python :results output org drawer
from ase.build import bulk
from ase.calculators.emt import EMT
from dap.ag.emt import parameters, energy, forces, stress
import numpy as np

atoms = bulk('Cu', 'fcc', a=3.6).repeat((2, 2, 2))
atoms.set_calculator(EMT())
atoms.rattle()


e = energy(parameters, atoms.positions, atoms.numbers, atoms.cell)
print(f'ase: {atoms.get_potential_energy()}\nag : {e}')

f = forces(parameters, atoms.positions, atoms.numbers, atoms.cell)
print(f'Forces equal: {np.allclose(f, atoms.get_forces())}')

# Good luck getting this from ASE!
s = stress(parameters, atoms.positions, atoms.numbers, atoms.cell)
print(s)
#+END_SRC

#+RESULTS:
:RESULTS:
ase: -0.0534529034684148
ag : -0.0534529034684148
Forces equal: True
[ 6.99783243e-03  6.99779486e-03  6.99766900e-03 -7.41208181e-07
  3.16443974e-07 -2.32564931e-07]
:END:

** Training your own EMT

One of the main points of this is to get a trainable EMT, so you can use it for what you want. The parameters are in dap.ag.emt.parameters. We can use this in autograd.

These are a set of clusters we could use for input data.

#+BEGIN_SRC ipython
from ase.cluster.icosahedron import Icosahedron

atoms = Icosahedron('Au', noshells=2)
print(atoms)

atoms = Icosahedron('Au', noshells=3)
print(atoms)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[3]:
# output
: Atoms(symbols='Au', pbc=False, tags=...)
: Atoms(symbols='Au13', pbc=False, cell=[4.908247792861572, 4.908247792861572, 4.908247792861572], tags=...)
: Atoms(symbols='Au55', pbc=False, cell=[9.816495585723144, 9.816495585723144, 9.816495585723144], tags=...)
:END:

#+BEGIN_SRC ipython 
from ase.cluster.octahedron import Octahedron

atoms = Octahedron('Au', 2)
print(atoms)

atoms = Octahedron('Au', 3)
print(atoms)

atoms = Octahedron('Au', 4)
print(atoms)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[7]:
# output
: Cluster(symbols='Au6', pbc=False, cell=[4.08, 4.08, 4.08])
: Cluster(symbols='Au19', pbc=False, cell=[8.16, 8.16, 8.16])
: Cluster(symbols='Au44', pbc=False, cell=[12.24, 12.24, 12.24])
:END:

#+BEGIN_SRC ipython 
from ase.cluster.decahedron import Decahedron

atoms = Decahedron('Au', 2, 2, 0)
print(atoms)

atoms = Decahedron('Au', 2, 2, 1)
print(atoms)

atoms = Decahedron('Au', 3, 2, 0)
print(atoms)

atoms = Decahedron('Au', 2, 3, 0)
print(atoms)

atoms = Decahedron('Au', 3, 3, 0)
print(atoms)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[12]:
# output
: Atoms(symbols='Au13', pbc=False, cell=[4.752390490203045, 4.519791943686726, 5.769991334482228])
: Atoms(symbols='Au75', pbc=False, cell=[12.441919831163347, 11.832968930649798, 11.539982668964456])
: Atoms(symbols='Au39', pbc=False, cell=[9.50478098040609, 9.039583887373452, 8.654987001723342])
: Atoms(symbols='Au19', pbc=False, cell=[4.752390490203045, 4.519791943686726, 8.654987001723342])
: Atoms(symbols='Au55', pbc=False, cell=[9.50478098040609, 9.039583887373452, 11.539982668964456])
:END:

*  Bibtex entries

#+BEGIN_SRC text
@article{jacobsen-1996-semi-empir,
  author =	 {K.W. Jacobsen and P. Stoltze and J.K. N{\o}rskov},
  title =	 {A Semi-Empirical Effective Medium Theory for Metals and
                  Alloys},
  journal =	 {Surface Science},
  volume =	 366,
  number =	 2,
  pages =	 {394-402},
  year =	 1996,
  doi =		 {10.1016/0039-6028(96)00816-3},
  url =		 {https://doi.org/10.1016/0039-6028(96)00816-3},
  DATE_ADDED =	 {Tue Nov 21 15:34:51 2017},
}



#+END_SRC
